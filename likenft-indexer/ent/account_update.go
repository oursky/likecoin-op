// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/account"
	"likenft-indexer/ent/nft"
	"likenft-indexer/ent/nftclass"
	"likenft-indexer/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCosmosAddress sets the "cosmos_address" field.
func (au *AccountUpdate) SetCosmosAddress(s string) *AccountUpdate {
	au.mutation.SetCosmosAddress(s)
	return au
}

// SetNillableCosmosAddress sets the "cosmos_address" field if the given value is not nil.
func (au *AccountUpdate) SetNillableCosmosAddress(s *string) *AccountUpdate {
	if s != nil {
		au.SetCosmosAddress(*s)
	}
	return au
}

// ClearCosmosAddress clears the value of the "cosmos_address" field.
func (au *AccountUpdate) ClearCosmosAddress() *AccountUpdate {
	au.mutation.ClearCosmosAddress()
	return au
}

// SetEvmAddress sets the "evm_address" field.
func (au *AccountUpdate) SetEvmAddress(s string) *AccountUpdate {
	au.mutation.SetEvmAddress(s)
	return au
}

// SetNillableEvmAddress sets the "evm_address" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEvmAddress(s *string) *AccountUpdate {
	if s != nil {
		au.SetEvmAddress(*s)
	}
	return au
}

// SetLikeid sets the "likeid" field.
func (au *AccountUpdate) SetLikeid(s string) *AccountUpdate {
	au.mutation.SetLikeid(s)
	return au
}

// SetNillableLikeid sets the "likeid" field if the given value is not nil.
func (au *AccountUpdate) SetNillableLikeid(s *string) *AccountUpdate {
	if s != nil {
		au.SetLikeid(*s)
	}
	return au
}

// ClearLikeid clears the value of the "likeid" field.
func (au *AccountUpdate) ClearLikeid() *AccountUpdate {
	au.mutation.ClearLikeid()
	return au
}

// AddNftClassIDs adds the "nft_classes" edge to the NFTClass entity by IDs.
func (au *AccountUpdate) AddNftClassIDs(ids ...int) *AccountUpdate {
	au.mutation.AddNftClassIDs(ids...)
	return au
}

// AddNftClasses adds the "nft_classes" edges to the NFTClass entity.
func (au *AccountUpdate) AddNftClasses(n ...*NFTClass) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNftClassIDs(ids...)
}

// AddNftIDs adds the "nfts" edge to the NFT entity by IDs.
func (au *AccountUpdate) AddNftIDs(ids ...int) *AccountUpdate {
	au.mutation.AddNftIDs(ids...)
	return au
}

// AddNfts adds the "nfts" edges to the NFT entity.
func (au *AccountUpdate) AddNfts(n ...*NFT) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNftIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearNftClasses clears all "nft_classes" edges to the NFTClass entity.
func (au *AccountUpdate) ClearNftClasses() *AccountUpdate {
	au.mutation.ClearNftClasses()
	return au
}

// RemoveNftClassIDs removes the "nft_classes" edge to NFTClass entities by IDs.
func (au *AccountUpdate) RemoveNftClassIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveNftClassIDs(ids...)
	return au
}

// RemoveNftClasses removes "nft_classes" edges to NFTClass entities.
func (au *AccountUpdate) RemoveNftClasses(n ...*NFTClass) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNftClassIDs(ids...)
}

// ClearNfts clears all "nfts" edges to the NFT entity.
func (au *AccountUpdate) ClearNfts() *AccountUpdate {
	au.mutation.ClearNfts()
	return au
}

// RemoveNftIDs removes the "nfts" edge to NFT entities by IDs.
func (au *AccountUpdate) RemoveNftIDs(ids ...int) *AccountUpdate {
	au.mutation.RemoveNftIDs(ids...)
	return au
}

// RemoveNfts removes "nfts" edges to NFT entities.
func (au *AccountUpdate) RemoveNfts(n ...*NFT) *AccountUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNftIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CosmosAddress(); ok {
		_spec.SetField(account.FieldCosmosAddress, field.TypeString, value)
	}
	if au.mutation.CosmosAddressCleared() {
		_spec.ClearField(account.FieldCosmosAddress, field.TypeString)
	}
	if value, ok := au.mutation.EvmAddress(); ok {
		_spec.SetField(account.FieldEvmAddress, field.TypeString, value)
	}
	if value, ok := au.mutation.Likeid(); ok {
		_spec.SetField(account.FieldLikeid, field.TypeString, value)
	}
	if au.mutation.LikeidCleared() {
		_spec.ClearField(account.FieldLikeid, field.TypeString)
	}
	if au.mutation.NftClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNftClassesIDs(); len(nodes) > 0 && !au.mutation.NftClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NftClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNftsIDs(); len(nodes) > 0 && !au.mutation.NftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetCosmosAddress sets the "cosmos_address" field.
func (auo *AccountUpdateOne) SetCosmosAddress(s string) *AccountUpdateOne {
	auo.mutation.SetCosmosAddress(s)
	return auo
}

// SetNillableCosmosAddress sets the "cosmos_address" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableCosmosAddress(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetCosmosAddress(*s)
	}
	return auo
}

// ClearCosmosAddress clears the value of the "cosmos_address" field.
func (auo *AccountUpdateOne) ClearCosmosAddress() *AccountUpdateOne {
	auo.mutation.ClearCosmosAddress()
	return auo
}

// SetEvmAddress sets the "evm_address" field.
func (auo *AccountUpdateOne) SetEvmAddress(s string) *AccountUpdateOne {
	auo.mutation.SetEvmAddress(s)
	return auo
}

// SetNillableEvmAddress sets the "evm_address" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEvmAddress(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEvmAddress(*s)
	}
	return auo
}

// SetLikeid sets the "likeid" field.
func (auo *AccountUpdateOne) SetLikeid(s string) *AccountUpdateOne {
	auo.mutation.SetLikeid(s)
	return auo
}

// SetNillableLikeid sets the "likeid" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableLikeid(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetLikeid(*s)
	}
	return auo
}

// ClearLikeid clears the value of the "likeid" field.
func (auo *AccountUpdateOne) ClearLikeid() *AccountUpdateOne {
	auo.mutation.ClearLikeid()
	return auo
}

// AddNftClassIDs adds the "nft_classes" edge to the NFTClass entity by IDs.
func (auo *AccountUpdateOne) AddNftClassIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddNftClassIDs(ids...)
	return auo
}

// AddNftClasses adds the "nft_classes" edges to the NFTClass entity.
func (auo *AccountUpdateOne) AddNftClasses(n ...*NFTClass) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNftClassIDs(ids...)
}

// AddNftIDs adds the "nfts" edge to the NFT entity by IDs.
func (auo *AccountUpdateOne) AddNftIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.AddNftIDs(ids...)
	return auo
}

// AddNfts adds the "nfts" edges to the NFT entity.
func (auo *AccountUpdateOne) AddNfts(n ...*NFT) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNftIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearNftClasses clears all "nft_classes" edges to the NFTClass entity.
func (auo *AccountUpdateOne) ClearNftClasses() *AccountUpdateOne {
	auo.mutation.ClearNftClasses()
	return auo
}

// RemoveNftClassIDs removes the "nft_classes" edge to NFTClass entities by IDs.
func (auo *AccountUpdateOne) RemoveNftClassIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveNftClassIDs(ids...)
	return auo
}

// RemoveNftClasses removes "nft_classes" edges to NFTClass entities.
func (auo *AccountUpdateOne) RemoveNftClasses(n ...*NFTClass) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNftClassIDs(ids...)
}

// ClearNfts clears all "nfts" edges to the NFT entity.
func (auo *AccountUpdateOne) ClearNfts() *AccountUpdateOne {
	auo.mutation.ClearNfts()
	return auo
}

// RemoveNftIDs removes the "nfts" edge to NFT entities by IDs.
func (auo *AccountUpdateOne) RemoveNftIDs(ids ...int) *AccountUpdateOne {
	auo.mutation.RemoveNftIDs(ids...)
	return auo
}

// RemoveNfts removes "nfts" edges to NFT entities.
func (auo *AccountUpdateOne) RemoveNfts(n ...*NFT) *AccountUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNftIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CosmosAddress(); ok {
		_spec.SetField(account.FieldCosmosAddress, field.TypeString, value)
	}
	if auo.mutation.CosmosAddressCleared() {
		_spec.ClearField(account.FieldCosmosAddress, field.TypeString)
	}
	if value, ok := auo.mutation.EvmAddress(); ok {
		_spec.SetField(account.FieldEvmAddress, field.TypeString, value)
	}
	if value, ok := auo.mutation.Likeid(); ok {
		_spec.SetField(account.FieldLikeid, field.TypeString, value)
	}
	if auo.mutation.LikeidCleared() {
		_spec.ClearField(account.FieldLikeid, field.TypeString)
	}
	if auo.mutation.NftClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNftClassesIDs(); len(nodes) > 0 && !auo.mutation.NftClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NftClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftClassesTable,
			Columns: []string{account.NftClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNftsIDs(); len(nodes) > 0 && !auo.mutation.NftsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.NftsTable,
			Columns: []string{account.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
