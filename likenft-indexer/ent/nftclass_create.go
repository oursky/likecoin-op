// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"likenft-indexer/ent/account"
	"likenft-indexer/ent/nft"
	"likenft-indexer/ent/nftclass"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NFTClassCreate is the builder for creating a NFTClass entity.
type NFTClassCreate struct {
	config
	mutation *NFTClassMutation
	hooks    []Hook
}

// SetAddress sets the "address" field.
func (ncc *NFTClassCreate) SetAddress(s string) *NFTClassCreate {
	ncc.mutation.SetAddress(s)
	return ncc
}

// SetName sets the "name" field.
func (ncc *NFTClassCreate) SetName(s string) *NFTClassCreate {
	ncc.mutation.SetName(s)
	return ncc
}

// SetSymbol sets the "symbol" field.
func (ncc *NFTClassCreate) SetSymbol(s string) *NFTClassCreate {
	ncc.mutation.SetSymbol(s)
	return ncc
}

// SetOwnerAddress sets the "owner_address" field.
func (ncc *NFTClassCreate) SetOwnerAddress(s string) *NFTClassCreate {
	ncc.mutation.SetOwnerAddress(s)
	return ncc
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (ncc *NFTClassCreate) SetNillableOwnerAddress(s *string) *NFTClassCreate {
	if s != nil {
		ncc.SetOwnerAddress(*s)
	}
	return ncc
}

// SetMinterAddresses sets the "minter_addresses" field.
func (ncc *NFTClassCreate) SetMinterAddresses(s []string) *NFTClassCreate {
	ncc.mutation.SetMinterAddresses(s)
	return ncc
}

// SetTotalSupply sets the "total_supply" field.
func (ncc *NFTClassCreate) SetTotalSupply(i int) *NFTClassCreate {
	ncc.mutation.SetTotalSupply(i)
	return ncc
}

// SetMetadata sets the "metadata" field.
func (ncc *NFTClassCreate) SetMetadata(m map[string]interface{}) *NFTClassCreate {
	ncc.mutation.SetMetadata(m)
	return ncc
}

// SetBannerImage sets the "banner_image" field.
func (ncc *NFTClassCreate) SetBannerImage(s string) *NFTClassCreate {
	ncc.mutation.SetBannerImage(s)
	return ncc
}

// SetFeaturedImage sets the "featured_image" field.
func (ncc *NFTClassCreate) SetFeaturedImage(s string) *NFTClassCreate {
	ncc.mutation.SetFeaturedImage(s)
	return ncc
}

// SetDeployerAddress sets the "deployer_address" field.
func (ncc *NFTClassCreate) SetDeployerAddress(s string) *NFTClassCreate {
	ncc.mutation.SetDeployerAddress(s)
	return ncc
}

// SetDeployedBlockNumber sets the "deployed_block_number" field.
func (ncc *NFTClassCreate) SetDeployedBlockNumber(s string) *NFTClassCreate {
	ncc.mutation.SetDeployedBlockNumber(s)
	return ncc
}

// SetMintedAt sets the "minted_at" field.
func (ncc *NFTClassCreate) SetMintedAt(t time.Time) *NFTClassCreate {
	ncc.mutation.SetMintedAt(t)
	return ncc
}

// SetUpdatedAt sets the "updated_at" field.
func (ncc *NFTClassCreate) SetUpdatedAt(t time.Time) *NFTClassCreate {
	ncc.mutation.SetUpdatedAt(t)
	return ncc
}

// AddNftIDs adds the "nfts" edge to the NFT entity by IDs.
func (ncc *NFTClassCreate) AddNftIDs(ids ...int) *NFTClassCreate {
	ncc.mutation.AddNftIDs(ids...)
	return ncc
}

// AddNfts adds the "nfts" edges to the NFT entity.
func (ncc *NFTClassCreate) AddNfts(n ...*NFT) *NFTClassCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ncc.AddNftIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the Account entity by ID.
func (ncc *NFTClassCreate) SetOwnerID(id int) *NFTClassCreate {
	ncc.mutation.SetOwnerID(id)
	return ncc
}

// SetNillableOwnerID sets the "owner" edge to the Account entity by ID if the given value is not nil.
func (ncc *NFTClassCreate) SetNillableOwnerID(id *int) *NFTClassCreate {
	if id != nil {
		ncc = ncc.SetOwnerID(*id)
	}
	return ncc
}

// SetOwner sets the "owner" edge to the Account entity.
func (ncc *NFTClassCreate) SetOwner(a *Account) *NFTClassCreate {
	return ncc.SetOwnerID(a.ID)
}

// Mutation returns the NFTClassMutation object of the builder.
func (ncc *NFTClassCreate) Mutation() *NFTClassMutation {
	return ncc.mutation
}

// Save creates the NFTClass in the database.
func (ncc *NFTClassCreate) Save(ctx context.Context) (*NFTClass, error) {
	return withHooks(ctx, ncc.sqlSave, ncc.mutation, ncc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NFTClassCreate) SaveX(ctx context.Context) *NFTClass {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NFTClassCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NFTClassCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NFTClassCreate) check() error {
	if _, ok := ncc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "NFTClass.address"`)}
	}
	if _, ok := ncc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NFTClass.name"`)}
	}
	if v, ok := ncc.mutation.Name(); ok {
		if err := nftclass.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NFTClass.name": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "NFTClass.symbol"`)}
	}
	if v, ok := ncc.mutation.Symbol(); ok {
		if err := nftclass.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "NFTClass.symbol": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.TotalSupply(); !ok {
		return &ValidationError{Name: "total_supply", err: errors.New(`ent: missing required field "NFTClass.total_supply"`)}
	}
	if v, ok := ncc.mutation.TotalSupply(); ok {
		if err := nftclass.TotalSupplyValidator(v); err != nil {
			return &ValidationError{Name: "total_supply", err: fmt.Errorf(`ent: validator failed for field "NFTClass.total_supply": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.BannerImage(); !ok {
		return &ValidationError{Name: "banner_image", err: errors.New(`ent: missing required field "NFTClass.banner_image"`)}
	}
	if v, ok := ncc.mutation.BannerImage(); ok {
		if err := nftclass.BannerImageValidator(v); err != nil {
			return &ValidationError{Name: "banner_image", err: fmt.Errorf(`ent: validator failed for field "NFTClass.banner_image": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.FeaturedImage(); !ok {
		return &ValidationError{Name: "featured_image", err: errors.New(`ent: missing required field "NFTClass.featured_image"`)}
	}
	if v, ok := ncc.mutation.FeaturedImage(); ok {
		if err := nftclass.FeaturedImageValidator(v); err != nil {
			return &ValidationError{Name: "featured_image", err: fmt.Errorf(`ent: validator failed for field "NFTClass.featured_image": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.DeployerAddress(); !ok {
		return &ValidationError{Name: "deployer_address", err: errors.New(`ent: missing required field "NFTClass.deployer_address"`)}
	}
	if v, ok := ncc.mutation.DeployerAddress(); ok {
		if err := nftclass.DeployerAddressValidator(v); err != nil {
			return &ValidationError{Name: "deployer_address", err: fmt.Errorf(`ent: validator failed for field "NFTClass.deployer_address": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.DeployedBlockNumber(); !ok {
		return &ValidationError{Name: "deployed_block_number", err: errors.New(`ent: missing required field "NFTClass.deployed_block_number"`)}
	}
	if v, ok := ncc.mutation.DeployedBlockNumber(); ok {
		if err := nftclass.DeployedBlockNumberValidator(v); err != nil {
			return &ValidationError{Name: "deployed_block_number", err: fmt.Errorf(`ent: validator failed for field "NFTClass.deployed_block_number": %w`, err)}
		}
	}
	if _, ok := ncc.mutation.MintedAt(); !ok {
		return &ValidationError{Name: "minted_at", err: errors.New(`ent: missing required field "NFTClass.minted_at"`)}
	}
	if _, ok := ncc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NFTClass.updated_at"`)}
	}
	return nil
}

func (ncc *NFTClassCreate) sqlSave(ctx context.Context) (*NFTClass, error) {
	if err := ncc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ncc.mutation.id = &_node.ID
	ncc.mutation.done = true
	return _node, nil
}

func (ncc *NFTClassCreate) createSpec() (*NFTClass, *sqlgraph.CreateSpec) {
	var (
		_node = &NFTClass{config: ncc.config}
		_spec = sqlgraph.NewCreateSpec(nftclass.Table, sqlgraph.NewFieldSpec(nftclass.FieldID, field.TypeInt))
	)
	if value, ok := ncc.mutation.Address(); ok {
		_spec.SetField(nftclass.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ncc.mutation.Name(); ok {
		_spec.SetField(nftclass.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ncc.mutation.Symbol(); ok {
		_spec.SetField(nftclass.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := ncc.mutation.OwnerAddress(); ok {
		_spec.SetField(nftclass.FieldOwnerAddress, field.TypeString, value)
		_node.OwnerAddress = &value
	}
	if value, ok := ncc.mutation.MinterAddresses(); ok {
		_spec.SetField(nftclass.FieldMinterAddresses, field.TypeJSON, value)
		_node.MinterAddresses = value
	}
	if value, ok := ncc.mutation.TotalSupply(); ok {
		_spec.SetField(nftclass.FieldTotalSupply, field.TypeInt, value)
		_node.TotalSupply = value
	}
	if value, ok := ncc.mutation.Metadata(); ok {
		_spec.SetField(nftclass.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ncc.mutation.BannerImage(); ok {
		_spec.SetField(nftclass.FieldBannerImage, field.TypeString, value)
		_node.BannerImage = value
	}
	if value, ok := ncc.mutation.FeaturedImage(); ok {
		_spec.SetField(nftclass.FieldFeaturedImage, field.TypeString, value)
		_node.FeaturedImage = value
	}
	if value, ok := ncc.mutation.DeployerAddress(); ok {
		_spec.SetField(nftclass.FieldDeployerAddress, field.TypeString, value)
		_node.DeployerAddress = value
	}
	if value, ok := ncc.mutation.DeployedBlockNumber(); ok {
		_spec.SetField(nftclass.FieldDeployedBlockNumber, field.TypeString, value)
		_node.DeployedBlockNumber = value
	}
	if value, ok := ncc.mutation.MintedAt(); ok {
		_spec.SetField(nftclass.FieldMintedAt, field.TypeTime, value)
		_node.MintedAt = value
	}
	if value, ok := ncc.mutation.UpdatedAt(); ok {
		_spec.SetField(nftclass.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ncc.mutation.NftsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nftclass.NftsTable,
			Columns: []string{nftclass.NftsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ncc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nftclass.OwnerTable,
			Columns: []string{nftclass.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_nft_classes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NFTClassCreateBulk is the builder for creating many NFTClass entities in bulk.
type NFTClassCreateBulk struct {
	config
	err      error
	builders []*NFTClassCreate
}

// Save creates the NFTClass entities in the database.
func (nccb *NFTClassCreateBulk) Save(ctx context.Context) ([]*NFTClass, error) {
	if nccb.err != nil {
		return nil, nccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NFTClass, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NFTClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NFTClassCreateBulk) SaveX(ctx context.Context) []*NFTClass {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NFTClassCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NFTClassCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
