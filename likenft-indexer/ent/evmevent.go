// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"likenft-indexer/ent/evmevent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EVMEvent is the model entity for the EVMEvent schema.
type EVMEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransactionHash holds the value of the "transaction_hash" field.
	TransactionHash string `json:"transaction_hash,omitempty"`
	// BlockHash holds the value of the "block_hash" field.
	BlockHash string `json:"block_hash,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber uint64 `json:"block_number,omitempty"`
	// LogIndex holds the value of the "log_index" field.
	LogIndex uint64 `json:"log_index,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Topic0 holds the value of the "topic0" field.
	Topic0 string `json:"topic0,omitempty"`
	// Topic1 holds the value of the "topic1" field.
	Topic1 string `json:"topic1,omitempty"`
	// Topic2 holds the value of the "topic2" field.
	Topic2 string `json:"topic2,omitempty"`
	// Topic3 holds the value of the "topic3" field.
	Topic3 string `json:"topic3,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp    time.Time `json:"timestamp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EVMEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case evmevent.FieldID, evmevent.FieldBlockNumber, evmevent.FieldLogIndex:
			values[i] = new(sql.NullInt64)
		case evmevent.FieldTransactionHash, evmevent.FieldBlockHash, evmevent.FieldAddress, evmevent.FieldTopic0, evmevent.FieldTopic1, evmevent.FieldTopic2, evmevent.FieldTopic3, evmevent.FieldData:
			values[i] = new(sql.NullString)
		case evmevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EVMEvent fields.
func (ee *EVMEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evmevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ee.ID = int(value.Int64)
		case evmevent.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				ee.TransactionHash = value.String
			}
		case evmevent.FieldBlockHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block_hash", values[i])
			} else if value.Valid {
				ee.BlockHash = value.String
			}
		case evmevent.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				ee.BlockNumber = uint64(value.Int64)
			}
		case evmevent.FieldLogIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field log_index", values[i])
			} else if value.Valid {
				ee.LogIndex = uint64(value.Int64)
			}
		case evmevent.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				ee.Address = value.String
			}
		case evmevent.FieldTopic0:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic0", values[i])
			} else if value.Valid {
				ee.Topic0 = value.String
			}
		case evmevent.FieldTopic1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic1", values[i])
			} else if value.Valid {
				ee.Topic1 = value.String
			}
		case evmevent.FieldTopic2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic2", values[i])
			} else if value.Valid {
				ee.Topic2 = value.String
			}
		case evmevent.FieldTopic3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic3", values[i])
			} else if value.Valid {
				ee.Topic3 = value.String
			}
		case evmevent.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				ee.Data = value.String
			}
		case evmevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				ee.Timestamp = value.Time
			}
		default:
			ee.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EVMEvent.
// This includes values selected through modifiers, order, etc.
func (ee *EVMEvent) Value(name string) (ent.Value, error) {
	return ee.selectValues.Get(name)
}

// Update returns a builder for updating this EVMEvent.
// Note that you need to call EVMEvent.Unwrap() before calling this method if this EVMEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ee *EVMEvent) Update() *EVMEventUpdateOne {
	return NewEVMEventClient(ee.config).UpdateOne(ee)
}

// Unwrap unwraps the EVMEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ee *EVMEvent) Unwrap() *EVMEvent {
	_tx, ok := ee.config.driver.(*txDriver)
	if !ok {
		panic("ent: EVMEvent is not a transactional entity")
	}
	ee.config.driver = _tx.drv
	return ee
}

// String implements the fmt.Stringer.
func (ee *EVMEvent) String() string {
	var builder strings.Builder
	builder.WriteString("EVMEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ee.ID))
	builder.WriteString("transaction_hash=")
	builder.WriteString(ee.TransactionHash)
	builder.WriteString(", ")
	builder.WriteString("block_hash=")
	builder.WriteString(ee.BlockHash)
	builder.WriteString(", ")
	builder.WriteString("block_number=")
	builder.WriteString(fmt.Sprintf("%v", ee.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("log_index=")
	builder.WriteString(fmt.Sprintf("%v", ee.LogIndex))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(ee.Address)
	builder.WriteString(", ")
	builder.WriteString("topic0=")
	builder.WriteString(ee.Topic0)
	builder.WriteString(", ")
	builder.WriteString("topic1=")
	builder.WriteString(ee.Topic1)
	builder.WriteString(", ")
	builder.WriteString("topic2=")
	builder.WriteString(ee.Topic2)
	builder.WriteString(", ")
	builder.WriteString("topic3=")
	builder.WriteString(ee.Topic3)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(ee.Data)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(ee.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EVMEvents is a parsable slice of EVMEvent.
type EVMEvents []*EVMEvent
