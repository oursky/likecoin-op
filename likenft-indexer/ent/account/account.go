// Code generated by ent, DO NOT EDIT.

package account

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCosmosAddress holds the string denoting the cosmos_address field in the database.
	FieldCosmosAddress = "cosmos_address"
	// FieldEvmAddress holds the string denoting the evm_address field in the database.
	FieldEvmAddress = "evm_address"
	// FieldLikeid holds the string denoting the likeid field in the database.
	FieldLikeid = "likeid"
	// EdgeNftClasses holds the string denoting the nft_classes edge name in mutations.
	EdgeNftClasses = "nft_classes"
	// EdgeNfts holds the string denoting the nfts edge name in mutations.
	EdgeNfts = "nfts"
	// Table holds the table name of the account in the database.
	Table = "accounts"
	// NftClassesTable is the table that holds the nft_classes relation/edge.
	NftClassesTable = "nft_classes"
	// NftClassesInverseTable is the table name for the NFTClass entity.
	// It exists in this package in order to avoid circular dependency with the "nftclass" package.
	NftClassesInverseTable = "nft_classes"
	// NftClassesColumn is the table column denoting the nft_classes relation/edge.
	NftClassesColumn = "account_nft_classes"
	// NftsTable is the table that holds the nfts relation/edge.
	NftsTable = "nfts"
	// NftsInverseTable is the table name for the NFT entity.
	// It exists in this package in order to avoid circular dependency with the "nft" package.
	NftsInverseTable = "nfts"
	// NftsColumn is the table column denoting the nfts relation/edge.
	NftsColumn = "account_nfts"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldCosmosAddress,
	FieldEvmAddress,
	FieldLikeid,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCosmosAddress orders the results by the cosmos_address field.
func ByCosmosAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCosmosAddress, opts...).ToFunc()
}

// ByEvmAddress orders the results by the evm_address field.
func ByEvmAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvmAddress, opts...).ToFunc()
}

// ByLikeid orders the results by the likeid field.
func ByLikeid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeid, opts...).ToFunc()
}

// ByNftClassesCount orders the results by nft_classes count.
func ByNftClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNftClassesStep(), opts...)
	}
}

// ByNftClasses orders the results by nft_classes terms.
func ByNftClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNftClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNftsCount orders the results by nfts count.
func ByNftsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNftsStep(), opts...)
	}
}

// ByNfts orders the results by nfts terms.
func ByNfts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNftsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNftClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NftClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NftClassesTable, NftClassesColumn),
	)
}
func newNftsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NftsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NftsTable, NftsColumn),
	)
}
