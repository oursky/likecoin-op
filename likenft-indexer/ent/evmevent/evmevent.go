// Code generated by ent, DO NOT EDIT.

package evmevent

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the evmevent type in the database.
	Label = "evm_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionHash holds the string denoting the transaction_hash field in the database.
	FieldTransactionHash = "transaction_hash"
	// FieldBlockHash holds the string denoting the block_hash field in the database.
	FieldBlockHash = "block_hash"
	// FieldBlockNumber holds the string denoting the block_number field in the database.
	FieldBlockNumber = "block_number"
	// FieldLogIndex holds the string denoting the log_index field in the database.
	FieldLogIndex = "log_index"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldTopic0 holds the string denoting the topic0 field in the database.
	FieldTopic0 = "topic0"
	// FieldTopic1 holds the string denoting the topic1 field in the database.
	FieldTopic1 = "topic1"
	// FieldTopic2 holds the string denoting the topic2 field in the database.
	FieldTopic2 = "topic2"
	// FieldTopic3 holds the string denoting the topic3 field in the database.
	FieldTopic3 = "topic3"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// Table holds the table name of the evmevent in the database.
	Table = "evm_events"
)

// Columns holds all SQL columns for evmevent fields.
var Columns = []string{
	FieldID,
	FieldTransactionHash,
	FieldBlockHash,
	FieldBlockNumber,
	FieldLogIndex,
	FieldAddress,
	FieldTopic0,
	FieldTopic1,
	FieldTopic2,
	FieldTopic3,
	FieldData,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TransactionHashValidator is a validator for the "transaction_hash" field. It is called by the builders before save.
	TransactionHashValidator func(string) error
	// BlockHashValidator is a validator for the "block_hash" field. It is called by the builders before save.
	BlockHashValidator func(string) error
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// Topic0Validator is a validator for the "topic0" field. It is called by the builders before save.
	Topic0Validator func(string) error
)

// OrderOption defines the ordering options for the EVMEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTransactionHash orders the results by the transaction_hash field.
func ByTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionHash, opts...).ToFunc()
}

// ByBlockHash orders the results by the block_hash field.
func ByBlockHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockHash, opts...).ToFunc()
}

// ByBlockNumber orders the results by the block_number field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByLogIndex orders the results by the log_index field.
func ByLogIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogIndex, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByTopic0 orders the results by the topic0 field.
func ByTopic0(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic0, opts...).ToFunc()
}

// ByTopic1 orders the results by the topic1 field.
func ByTopic1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic1, opts...).ToFunc()
}

// ByTopic2 orders the results by the topic2 field.
func ByTopic2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic2, opts...).ToFunc()
}

// ByTopic3 orders the results by the topic3 field.
func ByTopic3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopic3, opts...).ToFunc()
}

// ByData orders the results by the data field.
func ByData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldData, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}
