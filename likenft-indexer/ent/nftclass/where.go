// Code generated by ent, DO NOT EDIT.

package nftclass

import (
	"likenft-indexer/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldID, id))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldAddress, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldName, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldSymbol, v))
}

// OwnerAddress applies equality check predicate on the "owner_address" field. It's identical to OwnerAddressEQ.
func OwnerAddress(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldOwnerAddress, v))
}

// TotalSupply applies equality check predicate on the "total_supply" field. It's identical to TotalSupplyEQ.
func TotalSupply(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldTotalSupply, v))
}

// BannerImage applies equality check predicate on the "banner_image" field. It's identical to BannerImageEQ.
func BannerImage(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldBannerImage, v))
}

// FeaturedImage applies equality check predicate on the "featured_image" field. It's identical to FeaturedImageEQ.
func FeaturedImage(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldFeaturedImage, v))
}

// DeployerAddress applies equality check predicate on the "deployer_address" field. It's identical to DeployerAddressEQ.
func DeployerAddress(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldDeployerAddress, v))
}

// DeployedBlockNumber applies equality check predicate on the "deployed_block_number" field. It's identical to DeployedBlockNumberEQ.
func DeployedBlockNumber(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldDeployedBlockNumber, v))
}

// MintedAt applies equality check predicate on the "minted_at" field. It's identical to MintedAtEQ.
func MintedAt(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldMintedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldUpdatedAt, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldAddress, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldName, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldSymbol, v))
}

// OwnerAddressEQ applies the EQ predicate on the "owner_address" field.
func OwnerAddressEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressNEQ applies the NEQ predicate on the "owner_address" field.
func OwnerAddressNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldOwnerAddress, v))
}

// OwnerAddressIn applies the In predicate on the "owner_address" field.
func OwnerAddressIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldOwnerAddress, vs...))
}

// OwnerAddressNotIn applies the NotIn predicate on the "owner_address" field.
func OwnerAddressNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldOwnerAddress, vs...))
}

// OwnerAddressGT applies the GT predicate on the "owner_address" field.
func OwnerAddressGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldOwnerAddress, v))
}

// OwnerAddressGTE applies the GTE predicate on the "owner_address" field.
func OwnerAddressGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldOwnerAddress, v))
}

// OwnerAddressLT applies the LT predicate on the "owner_address" field.
func OwnerAddressLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldOwnerAddress, v))
}

// OwnerAddressLTE applies the LTE predicate on the "owner_address" field.
func OwnerAddressLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldOwnerAddress, v))
}

// OwnerAddressContains applies the Contains predicate on the "owner_address" field.
func OwnerAddressContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldOwnerAddress, v))
}

// OwnerAddressHasPrefix applies the HasPrefix predicate on the "owner_address" field.
func OwnerAddressHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldOwnerAddress, v))
}

// OwnerAddressHasSuffix applies the HasSuffix predicate on the "owner_address" field.
func OwnerAddressHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldOwnerAddress, v))
}

// OwnerAddressIsNil applies the IsNil predicate on the "owner_address" field.
func OwnerAddressIsNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIsNull(FieldOwnerAddress))
}

// OwnerAddressNotNil applies the NotNil predicate on the "owner_address" field.
func OwnerAddressNotNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotNull(FieldOwnerAddress))
}

// OwnerAddressEqualFold applies the EqualFold predicate on the "owner_address" field.
func OwnerAddressEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldOwnerAddress, v))
}

// OwnerAddressContainsFold applies the ContainsFold predicate on the "owner_address" field.
func OwnerAddressContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldOwnerAddress, v))
}

// MinterAddressesIsNil applies the IsNil predicate on the "minter_addresses" field.
func MinterAddressesIsNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIsNull(FieldMinterAddresses))
}

// MinterAddressesNotNil applies the NotNil predicate on the "minter_addresses" field.
func MinterAddressesNotNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotNull(FieldMinterAddresses))
}

// TotalSupplyEQ applies the EQ predicate on the "total_supply" field.
func TotalSupplyEQ(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldTotalSupply, v))
}

// TotalSupplyNEQ applies the NEQ predicate on the "total_supply" field.
func TotalSupplyNEQ(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldTotalSupply, v))
}

// TotalSupplyIn applies the In predicate on the "total_supply" field.
func TotalSupplyIn(vs ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldTotalSupply, vs...))
}

// TotalSupplyNotIn applies the NotIn predicate on the "total_supply" field.
func TotalSupplyNotIn(vs ...int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldTotalSupply, vs...))
}

// TotalSupplyGT applies the GT predicate on the "total_supply" field.
func TotalSupplyGT(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldTotalSupply, v))
}

// TotalSupplyGTE applies the GTE predicate on the "total_supply" field.
func TotalSupplyGTE(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldTotalSupply, v))
}

// TotalSupplyLT applies the LT predicate on the "total_supply" field.
func TotalSupplyLT(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldTotalSupply, v))
}

// TotalSupplyLTE applies the LTE predicate on the "total_supply" field.
func TotalSupplyLTE(v int) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldTotalSupply, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotNull(FieldMetadata))
}

// BannerImageEQ applies the EQ predicate on the "banner_image" field.
func BannerImageEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldBannerImage, v))
}

// BannerImageNEQ applies the NEQ predicate on the "banner_image" field.
func BannerImageNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldBannerImage, v))
}

// BannerImageIn applies the In predicate on the "banner_image" field.
func BannerImageIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldBannerImage, vs...))
}

// BannerImageNotIn applies the NotIn predicate on the "banner_image" field.
func BannerImageNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldBannerImage, vs...))
}

// BannerImageGT applies the GT predicate on the "banner_image" field.
func BannerImageGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldBannerImage, v))
}

// BannerImageGTE applies the GTE predicate on the "banner_image" field.
func BannerImageGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldBannerImage, v))
}

// BannerImageLT applies the LT predicate on the "banner_image" field.
func BannerImageLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldBannerImage, v))
}

// BannerImageLTE applies the LTE predicate on the "banner_image" field.
func BannerImageLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldBannerImage, v))
}

// BannerImageContains applies the Contains predicate on the "banner_image" field.
func BannerImageContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldBannerImage, v))
}

// BannerImageHasPrefix applies the HasPrefix predicate on the "banner_image" field.
func BannerImageHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldBannerImage, v))
}

// BannerImageHasSuffix applies the HasSuffix predicate on the "banner_image" field.
func BannerImageHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldBannerImage, v))
}

// BannerImageEqualFold applies the EqualFold predicate on the "banner_image" field.
func BannerImageEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldBannerImage, v))
}

// BannerImageContainsFold applies the ContainsFold predicate on the "banner_image" field.
func BannerImageContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldBannerImage, v))
}

// FeaturedImageEQ applies the EQ predicate on the "featured_image" field.
func FeaturedImageEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldFeaturedImage, v))
}

// FeaturedImageNEQ applies the NEQ predicate on the "featured_image" field.
func FeaturedImageNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldFeaturedImage, v))
}

// FeaturedImageIn applies the In predicate on the "featured_image" field.
func FeaturedImageIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldFeaturedImage, vs...))
}

// FeaturedImageNotIn applies the NotIn predicate on the "featured_image" field.
func FeaturedImageNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldFeaturedImage, vs...))
}

// FeaturedImageGT applies the GT predicate on the "featured_image" field.
func FeaturedImageGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldFeaturedImage, v))
}

// FeaturedImageGTE applies the GTE predicate on the "featured_image" field.
func FeaturedImageGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldFeaturedImage, v))
}

// FeaturedImageLT applies the LT predicate on the "featured_image" field.
func FeaturedImageLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldFeaturedImage, v))
}

// FeaturedImageLTE applies the LTE predicate on the "featured_image" field.
func FeaturedImageLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldFeaturedImage, v))
}

// FeaturedImageContains applies the Contains predicate on the "featured_image" field.
func FeaturedImageContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldFeaturedImage, v))
}

// FeaturedImageHasPrefix applies the HasPrefix predicate on the "featured_image" field.
func FeaturedImageHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldFeaturedImage, v))
}

// FeaturedImageHasSuffix applies the HasSuffix predicate on the "featured_image" field.
func FeaturedImageHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldFeaturedImage, v))
}

// FeaturedImageEqualFold applies the EqualFold predicate on the "featured_image" field.
func FeaturedImageEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldFeaturedImage, v))
}

// FeaturedImageContainsFold applies the ContainsFold predicate on the "featured_image" field.
func FeaturedImageContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldFeaturedImage, v))
}

// DeployerAddressEQ applies the EQ predicate on the "deployer_address" field.
func DeployerAddressEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldDeployerAddress, v))
}

// DeployerAddressNEQ applies the NEQ predicate on the "deployer_address" field.
func DeployerAddressNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldDeployerAddress, v))
}

// DeployerAddressIn applies the In predicate on the "deployer_address" field.
func DeployerAddressIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldDeployerAddress, vs...))
}

// DeployerAddressNotIn applies the NotIn predicate on the "deployer_address" field.
func DeployerAddressNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldDeployerAddress, vs...))
}

// DeployerAddressGT applies the GT predicate on the "deployer_address" field.
func DeployerAddressGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldDeployerAddress, v))
}

// DeployerAddressGTE applies the GTE predicate on the "deployer_address" field.
func DeployerAddressGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldDeployerAddress, v))
}

// DeployerAddressLT applies the LT predicate on the "deployer_address" field.
func DeployerAddressLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldDeployerAddress, v))
}

// DeployerAddressLTE applies the LTE predicate on the "deployer_address" field.
func DeployerAddressLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldDeployerAddress, v))
}

// DeployerAddressContains applies the Contains predicate on the "deployer_address" field.
func DeployerAddressContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldDeployerAddress, v))
}

// DeployerAddressHasPrefix applies the HasPrefix predicate on the "deployer_address" field.
func DeployerAddressHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldDeployerAddress, v))
}

// DeployerAddressHasSuffix applies the HasSuffix predicate on the "deployer_address" field.
func DeployerAddressHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldDeployerAddress, v))
}

// DeployerAddressEqualFold applies the EqualFold predicate on the "deployer_address" field.
func DeployerAddressEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldDeployerAddress, v))
}

// DeployerAddressContainsFold applies the ContainsFold predicate on the "deployer_address" field.
func DeployerAddressContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldDeployerAddress, v))
}

// DeployedBlockNumberEQ applies the EQ predicate on the "deployed_block_number" field.
func DeployedBlockNumberEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberNEQ applies the NEQ predicate on the "deployed_block_number" field.
func DeployedBlockNumberNEQ(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberIn applies the In predicate on the "deployed_block_number" field.
func DeployedBlockNumberIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldDeployedBlockNumber, vs...))
}

// DeployedBlockNumberNotIn applies the NotIn predicate on the "deployed_block_number" field.
func DeployedBlockNumberNotIn(vs ...string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldDeployedBlockNumber, vs...))
}

// DeployedBlockNumberGT applies the GT predicate on the "deployed_block_number" field.
func DeployedBlockNumberGT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberGTE applies the GTE predicate on the "deployed_block_number" field.
func DeployedBlockNumberGTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberLT applies the LT predicate on the "deployed_block_number" field.
func DeployedBlockNumberLT(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberLTE applies the LTE predicate on the "deployed_block_number" field.
func DeployedBlockNumberLTE(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberContains applies the Contains predicate on the "deployed_block_number" field.
func DeployedBlockNumberContains(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContains(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberHasPrefix applies the HasPrefix predicate on the "deployed_block_number" field.
func DeployedBlockNumberHasPrefix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasPrefix(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberHasSuffix applies the HasSuffix predicate on the "deployed_block_number" field.
func DeployedBlockNumberHasSuffix(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldHasSuffix(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberEqualFold applies the EqualFold predicate on the "deployed_block_number" field.
func DeployedBlockNumberEqualFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEqualFold(FieldDeployedBlockNumber, v))
}

// DeployedBlockNumberContainsFold applies the ContainsFold predicate on the "deployed_block_number" field.
func DeployedBlockNumberContainsFold(v string) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldContainsFold(FieldDeployedBlockNumber, v))
}

// MintedAtEQ applies the EQ predicate on the "minted_at" field.
func MintedAtEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldMintedAt, v))
}

// MintedAtNEQ applies the NEQ predicate on the "minted_at" field.
func MintedAtNEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldMintedAt, v))
}

// MintedAtIn applies the In predicate on the "minted_at" field.
func MintedAtIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldMintedAt, vs...))
}

// MintedAtNotIn applies the NotIn predicate on the "minted_at" field.
func MintedAtNotIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldMintedAt, vs...))
}

// MintedAtGT applies the GT predicate on the "minted_at" field.
func MintedAtGT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldMintedAt, v))
}

// MintedAtGTE applies the GTE predicate on the "minted_at" field.
func MintedAtGTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldMintedAt, v))
}

// MintedAtLT applies the LT predicate on the "minted_at" field.
func MintedAtLT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldMintedAt, v))
}

// MintedAtLTE applies the LTE predicate on the "minted_at" field.
func MintedAtLTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldMintedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NFTClass {
	return predicate.NFTClass(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasNfts applies the HasEdge predicate on the "nfts" edge.
func HasNfts() predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NftsTable, NftsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNftsWith applies the HasEdge predicate on the "nfts" edge with a given conditions (other predicates).
func HasNftsWith(preds ...predicate.NFT) predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := newNftsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Account) predicate.NFTClass {
	return predicate.NFTClass(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NFTClass) predicate.NFTClass {
	return predicate.NFTClass(sql.NotPredicates(p))
}
