// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package like_protocol

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ClassConfig is an auto generated low-level Go binding around an user-defined struct.
type ClassConfig struct {
	MaxSupply uint64
}

// ClassInput is an auto generated low-level Go binding around an user-defined struct.
type ClassInput struct {
	Name     string
	Symbol   string
	Metadata string
	Config   ClassConfig
}

// MsgMintNFT is an auto generated low-level Go binding around an user-defined struct.
type MsgMintNFT struct {
	Creator common.Address
	ClassId common.Address
	Input   NFTInput
}

// MsgMintNFTs is an auto generated low-level Go binding around an user-defined struct.
type MsgMintNFTs struct {
	Creator common.Address
	ClassId common.Address
	Inputs  []NFTInput
}

// MsgNewClass is an auto generated low-level Go binding around an user-defined struct.
type MsgNewClass struct {
	Creator common.Address
	Input   ClassInput
}

// MsgUpdateClass is an auto generated low-level Go binding around an user-defined struct.
type MsgUpdateClass struct {
	Creator common.Address
	ClassId common.Address
	Input   ClassInput
}

// NFTInput is an auto generated low-level Go binding around an user-defined struct.
type NFTInput struct {
	Metadata string
}

// LikeProtocolMetaData contains all meta data concerning the LikeProtocol contract.
var LikeProtocolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNftClassNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"classId\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"structMsgNewClass\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"NewClass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"class_id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"structNFTInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgMintNFT\",\"name\":\"msgMintNFT\",\"type\":\"tuple\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"class_id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"structNFTInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"internalType\":\"structMsgMintNFTs\",\"name\":\"msgMintNFTs\",\"type\":\"tuple\"}],\"name\":\"mintNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgNewClass\",\"name\":\"msgNewClass\",\"type\":\"tuple\"}],\"name\":\"newClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"class_id\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"max_supply\",\"type\":\"uint64\"}],\"internalType\":\"structClassConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"structClassInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"internalType\":\"structMsgUpdateClass\",\"name\":\"msgUpdateClass\",\"type\":\"tuple\"}],\"name\":\"updateClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a0604052306080523480156012575f5ffd5b506080516138ad6100395f395f8181610a9f01528181610ac80152610c0401526138ad5ff3fe6080604052600436106100e4575f3560e01c80638da5cb5b11610087578063d4ccb2d611610057578063d4ccb2d61461026e578063d53913931461028d578063f2fde38b146102c0578063f311c6cb146102df575f5ffd5b80638da5cb5b146101ad578063a3a19884146101f3578063ad3cb1cc14610212578063c4d66de81461024f575f5ffd5b806352d1902d116100c257806352d1902d146101305780635c975abb14610157578063715018a6146101855780638456cb5914610199575f5ffd5b80632865e32c146100e85780633f4ba83a146101095780634f1ef2861461011d575b5f5ffd5b3480156100f3575f5ffd5b50610107610102366004611180565b6102fe565b005b348015610114575f5ffd5b506101076103da565b61010761012b366004611218565b6103ec565b34801561013b575f5ffd5b50610144610402565b6040519081526020015b60405180910390f35b348015610162575f5ffd5b505f5160206138385f395f51905f525460ff16604051901515815260200161014e565b348015610190575f5ffd5b5061010761041d565b3480156101a4575f5ffd5b5061010761042e565b3480156101b8575f5ffd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b03909116815260200161014e565b3480156101fe575f5ffd5b5061010761020d36600461128b565b61043e565b34801561021d575f5ffd5b50610242604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161014e91906112f2565b34801561025a575f5ffd5b50610107610269366004611304565b6105cb565b348015610279575f5ffd5b5061010761028836600461131d565b6106e7565b348015610298575f5ffd5b506101447f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156102cb575f5ffd5b506101076102da366004611304565b6107be565b3480156102ea575f5ffd5b506101076102f936600461128b565b610800565b6103066109aa565b5f5f5160206138585f395f51905f5290505f8260405161032590610f94565b61032f9190611454565b604051809103905ff080158015610348573d5f5f3e3d5ffd5b506001808401805491820181555f908152602080822090920180546001600160a01b0385166001600160a01b03199182168117909255818352600287019093526040918290208054909316179091555190915081907f10936a740a24382c463d67a570ea343f2be4259b397e07470360b8a964bce074906103cc9083908790611466565b60405180910390a150505050565b6103e26109da565b6103ea610a35565b565b6103f4610a94565b6103fe8282610b38565b5050565b5f61040b610bf9565b505f5160206138185f395f51905f5290565b6104256109da565b6103ea5f610c42565b6104366109da565b6103ea610cb2565b6104466109aa565b5f5160206138585f395f51905f525f7ff59cae2d8704429a88f4a038c4cff8d2643dc6b4647d519013fb42e0b4344202816104876040860160208701611304565b6001600160a01b03908116825260208201929092526040015f2054169050806104c3576040516305c19d3560e51b815260040160405180910390fd5b6040805160018082528183019092525f91816020015b60608152602001906001900390816104d95790505090506104fd6040850185611489565b61050790806114a7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92018290525085518694509092501515905061054e5761054e6114f0565b6020026020010181905250816001600160a01b031663d90794cf855f01602081019061057a9190611304565b836040518363ffffffff1660e01b8152600401610598929190611504565b5f604051808303815f87803b1580156105af575f5ffd5b505af11580156105c1573d5f5f3e3d5ffd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03165f8115801561060f5750825b90505f826001600160401b0316600114801561062a5750303b155b905081158015610638575080155b156106565760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561068057845460ff60401b1916600160401b1785555b610688610cfa565b61069186610d02565b610699610d13565b83156106df57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6106ef6109aa565b6020818101516001600160a01b039081165f9081527ff59cae2d8704429a88f4a038c4cff8d2643dc6b4647d519013fb42e0b43442029092526040909120545f5160206138585f395f51905f5291168061075c576040516305c19d3560e51b815260040160405180910390fd5b604080840151905163765a15bb60e01b81526001600160a01b0383169163765a15bb9161078c9190600401611576565b5f604051808303815f87803b1580156107a3575f5ffd5b505af11580156107b5573d5f5f3e3d5ffd5b50505050505050565b6107c66109da565b6001600160a01b0381166107f457604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6107fd81610c42565b50565b6108086109aa565b5f5160206138585f395f51905f525f7ff59cae2d8704429a88f4a038c4cff8d2643dc6b4647d519013fb42e0b4344202816108496040860160208701611304565b6001600160a01b03908116825260208201929092526040015f205416905080610885576040516305c19d3560e51b815260040160405180910390fd5b5f6108936040850185611588565b90506001600160401b038111156108ac576108ac610fa1565b6040519080825280602002602001820160405280156108df57816020015b60608152602001906001900390816108ca5790505b5090505f5b6108f16040860186611588565b905081101561098d576109076040860186611588565b82818110610917576109176114f0565b90506020028101906109299190611489565b61093390806114a7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508451859250849150811061097a5761097a6114f0565b60209081029190910101526001016108e4565b506001600160a01b03821663d90794cf61057a6020870187611304565b5f5160206138385f395f51905f525460ff16156103ea5760405163d93c066560e01b815260040160405180910390fd5b33610a0c7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146103ea5760405163118cdaa760e01b81523360048201526024016107eb565b610a3d610d23565b5f5160206138385f395f51905f52805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610b1a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b0e5f5160206138185f395f51905f52546001600160a01b031690565b6001600160a01b031614155b156103ea5760405163703e46dd60e11b815260040160405180910390fd5b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b92575060408051601f3d908101601f19168201909252610b8f918101906115cd565b60015b610bba57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016107eb565b5f5160206138185f395f51905f528114610bea57604051632a87526960e21b8152600481018290526024016107eb565b610bf48383610d52565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ea5760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b610cba6109aa565b5f5160206138385f395f51905f52805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610a76565b6103ea610da7565b610d0a610da7565b6107fd81610df0565b610d1b610da7565b6103ea610df8565b5f5160206138385f395f51905f525460ff166103ea57604051638dfc202b60e01b815260040160405180910390fd5b610d5b82610e18565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115610d9f57610bf48282610e7b565b6103fe610eed565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166103ea57604051631afcd79f60e31b815260040160405180910390fd5b6107c6610da7565b610e00610da7565b5f5160206138385f395f51905f52805460ff19169055565b806001600160a01b03163b5f03610e4d57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016107eb565b5f5160206138185f395f51905f5280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b031684604051610e9791906115e4565b5f60405180830381855af49150503d805f8114610ecf576040519150601f19603f3d011682016040523d82523d5f602084013e610ed4565b606091505b5091509150610ee4858383610f0c565b95945050505050565b34156103ea5760405163b398979f60e01b815260040160405180910390fd5b606082610f2157610f1c82610f6b565b610f64565b8151158015610f3857506001600160a01b0384163b155b15610f6157604051639996b31560e01b81526001600160a01b03851660048201526024016107eb565b50805b9392505050565b805115610f7b5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b61221d806115fb83390190565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b0381118282101715610fd757610fd7610fa1565b60405290565b604051602081016001600160401b0381118282101715610fd757610fd7610fa1565b80356001600160a01b0381168114611015575f5ffd5b919050565b5f5f6001600160401b0384111561103357611033610fa1565b50604051601f19601f85018116603f011681018181106001600160401b038211171561106157611061610fa1565b604052838152905080828401851015611078575f5ffd5b838360208301375f60208583010152509392505050565b5f82601f83011261109e575f5ffd5b610f648383356020850161101a565b5f81830360808112156110be575f5ffd5b6110c6610fb5565b915082356001600160401b038111156110dd575f5ffd5b6110e98582860161108f565b83525060208301356001600160401b03811115611104575f5ffd5b6111108582860161108f565b60208401525060408301356001600160401b0381111561112e575f5ffd5b61113a8582860161108f565b6040840152506020605f1982011215611151575f5ffd5b5061115a610fdd565b60608301356001600160401b0381168114611173575f5ffd5b8152606082015292915050565b5f60208284031215611190575f5ffd5b81356001600160401b038111156111a5575f5ffd5b8201604081850312156111b6575f5ffd5b604080519081016001600160401b03811182821017156111d8576111d8610fa1565b6040526111e482610fff565b815260208201356001600160401b038111156111fe575f5ffd5b61120a868285016110ad565b602083015250949350505050565b5f5f60408385031215611229575f5ffd5b61123283610fff565b915060208301356001600160401b0381111561124c575f5ffd5b8301601f8101851361125c575f5ffd5b61126b8582356020840161101a565b9150509250929050565b5f60608284031215611285575f5ffd5b50919050565b5f6020828403121561129b575f5ffd5b81356001600160401b038111156112b0575f5ffd5b6112bc84828501611275565b949350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610f6460208301846112c4565b5f60208284031215611314575f5ffd5b610f6482610fff565b5f6020828403121561132d575f5ffd5b81356001600160401b03811115611342575f5ffd5b820160608185031215611353575f5ffd5b604051606081016001600160401b038111828210171561137557611375610fa1565b60405261138182610fff565b815261138f60208301610fff565b602082015260408201356001600160401b038111156113ac575f5ffd5b6113b8868285016110ad565b604083015250949350505050565b5f8151608084526113da60808501826112c4565b9050602083015184820360208601526113f382826112c4565b9150506040830151848203604086015261140d82826112c4565b9150506001600160401b036060840151511660608501528091505092915050565b60018060a01b0381511682525f6020820151604060208501526112bc60408501826113c6565b602081525f610f64602083018461142e565b6001600160a01b03831681526040602082018190525f906112bc9083018461142e565b5f8235601e1983360301811261149d575f5ffd5b9190910192915050565b5f5f8335601e198436030181126114bc575f5ffd5b8301803591506001600160401b038211156114d5575f5ffd5b6020019150368190038213156114e9575f5ffd5b9250929050565b634e487b7160e01b5f52603260045260245ffd5b5f6040820160018060a01b03851683526040602084015280845180835260608501915060608160051b8601019250602086015f5b8281101561156957605f198786030184526115548583516112c4565b94506020938401939190910190600101611538565b5092979650505050505050565b602081525f610f6460208301846113c6565b5f5f8335601e1984360301811261159d575f5ffd5b8301803591506001600160401b038211156115b6575f5ffd5b6020019150600581901b36038213156114e9575f5ffd5b5f602082840312156115dd575f5ffd5b5051919050565b5f82518060208501845e5f92019182525091905056fe608060405234801561000f575f5ffd5b5060405161221d38038061221d83398101604081905261002e91610386565b805160208083015180519101516002610047838261055b565b506003610054828261055b565b50505f8055506001600160a01b03811661008757604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100908161017f565b506020810151517f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f2009081906100c5908261055b565b50602080830151015160018201906100dd908261055b565b5060208201516040015160028201906100f6908261055b565b50602082015160600151516003820180546001600160401b0319166001600160401b0390921691909117905561014c7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336101d0565b506101777f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab336101d0565b505050610615565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f828152600a602090815260408083206001600160a01b038516845290915281205460ff16610274575f838152600a602090815260408083206001600160a01b03861684529091529020805460ff1916600117905561022c3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610277565b505f5b92915050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b03811182821017156102b3576102b361027d565b60405290565b604051608081016001600160401b03811182821017156102b3576102b361027d565b604051602081016001600160401b03811182821017156102b3576102b361027d565b5f82601f83011261030c575f5ffd5b81516001600160401b038111156103255761032561027d565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103535761035361027d565b60405281815283820160200185101561036a575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f60208284031215610396575f5ffd5b81516001600160401b038111156103ab575f5ffd5b8201604081850312156103bc575f5ffd5b6103c4610291565b81516001600160a01b03811681146103da575f5ffd5b815260208201516001600160401b038111156103f4575f5ffd5b91909101908185036080811215610409575f5ffd5b6104116102b9565b83516001600160401b03811115610426575f5ffd5b610432888287016102fd565b82525060208401516001600160401b0381111561044d575f5ffd5b610459888287016102fd565b60208301525060408401516001600160401b03811115610477575f5ffd5b610483888287016102fd565b6040830152506020605f198301121561049a575f5ffd5b6104a26102db565b606094909401519391506001600160401b03841684146104c0575f5ffd5b928152606083015260208101919091529392505050565b600181811c908216806104eb57607f821691505b60208210810361050957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561055657805f5260205f20601f840160051c810160208510156105345750805b601f840160051c820191505b81811015610553575f8155600101610540565b50505b505050565b81516001600160401b038111156105745761057461027d565b6105888161058284546104d7565b8461050f565b6020601f8211600181146105ba575f83156105a35750848201515b5f19600385901b1c1916600184901b178455610553565b5f84815260208120601f198516915b828110156105e957878501518255602094850194600190920191016105c9565b508482101561060657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b611bfb806106225f395ff3fe6080604052600436106101c5575f3560e01c8063765a15bb116100f2578063c87b56dd11610092578063dcb49c7311610062578063dcb49c73146104ff578063e8a3d48514610512578063e985e9c514610526578063f2fde38b1461056d575f5ffd5b8063c87b56dd1461046f578063d53913931461048e578063d547741f146104c1578063d90794cf146104e0575f5ffd5b806395d89b41116100cd57806395d89b4114610416578063a217fddf1461042a578063a22cb4651461043d578063b88d4fde1461045c575f5ffd5b8063765a15bb146103bb5780638da5cb5b146103da57806391d14854146103f7575f5ffd5b8063248a9ca31161016857806347e633801161013857806347e63380146103365780636352211e1461036957806370a0823114610388578063715018a6146103a7575f5ffd5b8063248a9ca3146102b75780632f2ff15d146102e557806336568abe1461030457806342842e0e14610323575f5ffd5b8063095ea7b3116101a3578063095ea7b31461025557806317d70f7c1461026a57806318160ddd1461028d57806323b872dd146102a4575f5ffd5b806301ffc9a7146101c957806306fdde03146101fd578063081812fc1461021e575b5f5ffd5b3480156101d4575f5ffd5b506101e86101e33660046112ee565b61058c565b60405190151581526020015b60405180910390f35b348015610208575f5ffd5b5061021161059c565b6040516101f4919061133e565b348015610229575f5ffd5b5061023d610238366004611350565b61063d565b6040516001600160a01b0390911681526020016101f4565b61026861026336600461137d565b610676565b005b348015610275575f5ffd5b5061027f600c5481565b6040519081526020016101f4565b348015610298575f5ffd5b506001545f540361027f565b6102686102b23660046113a5565b610686565b3480156102c2575f5ffd5b5061027f6102d1366004611350565b5f908152600a602052604090206001015490565b3480156102f0575f5ffd5b506102686102ff3660046113df565b6107e0565b34801561030f575f5ffd5b5061026861031e3660046113df565b61080a565b6102686103313660046113a5565b610842565b348015610341575f5ffd5b5061027f7f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab81565b348015610374575f5ffd5b5061023d610383366004611350565b61085c565b348015610393575f5ffd5b5061027f6103a2366004611409565b610866565b3480156103b2575f5ffd5b506102686108a9565b3480156103c6575f5ffd5b506102686103d5366004611513565b6108bc565b3480156103e5575f5ffd5b506009546001600160a01b031661023d565b348015610402575f5ffd5b506101e86104113660046113df565b61099f565b348015610421575f5ffd5b506102116109c9565b348015610435575f5ffd5b5061027f5f81565b348015610448575f5ffd5b5061026861045736600461160f565b610a07565b61026861046a366004611648565b610a72565b34801561047a575f5ffd5b50610211610489366004611350565b610aad565b348015610499575f5ffd5b5061027f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156104cc575f5ffd5b506102686104db3660046113df565b610ae5565b3480156104eb575f5ffd5b506102686104fa3660046116be565b610b09565b61026861050d36600461173d565b610c73565b34801561051d575f5ffd5b50610211610cd3565b348015610531575f5ffd5b506101e86105403660046117d0565b6001600160a01b039182165f90815260076020908152604080832093909416825291909152205460ff1690565b348015610578575f5ffd5b50610268610587366004611409565b610d1b565b5f61059682610d5d565b92915050565b5f516020611ba65f395f51905f5280546060919081906105bb906117f8565b80601f01602080910402602001604051908101604052809291908181526020018280546105e7906117f8565b80156106325780601f1061060957610100808354040283529160200191610632565b820191905f5260205f20905b81548152906001019060200180831161061557829003601f168201915b505050505091505090565b5f61064782610d91565b61065b5761065b6333d1c03960e21b610dd3565b505f908152600660205260409020546001600160a01b031690565b61068282826001610ddb565b5050565b5f61069082610e7c565b6001600160a01b0394851694909150811684146106b6576106b662a1148160e81b610dd3565b5f8281526006602052604090208054338082146001600160a01b038816909114176106f9576106e58633610540565b6106f9576106f9632ce44b5f60e11b610dd3565b8015610703575f82555b6001600160a01b038681165f9081526005602052604080822080545f19019055918716808252919020805460010190554260a01b17600160e11b175f85815260046020526040812091909155600160e11b8416900361078f57600184015f81815260046020526040812054900361078d575f54811461078d575f8181526004602052604090208490555b505b6001600160a01b0385168481887fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4805f036107d7576107d7633a954ecd60e21b610dd3565b50505050505050565b5f828152600a60205260409020600101546107fa81610f0b565b6108048383610f15565b50505050565b6001600160a01b03811633146108335760405163334bd91960e11b815260040160405180910390fd5b61083d8282610fa6565b505050565b61083d83838360405180602001604052805f815250610a72565b5f61059682610e7c565b5f6001600160a01b038216610885576108856323d3ad8160e21b610dd3565b506001600160a01b03165f908152600560205260409020546001600160401b031690565b6108b1611011565b6108ba5f61103e565b565b336108cf6009546001600160a01b031690565b6001600160a01b03161415801561090d575061090b7f73e573f9566d61418a34d5de3ff49360f9c51fec37f7486551670290f6285dab3361099f565b155b1561092b57604051636609677b60e11b815260040160405180910390fd5b80515f516020611ba65f395f51905f529081906109489082611874565b506020820151600182019061095d9082611874565b50604082015160028201906109729082611874565b506040517fa5d4097edda6d87cb9329af83fb3712ef77eeb13738ffe43cc35a4ce305ad962905f90a15050565b5f918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f20180546060915f516020611ba65f395f51905f52916105bb906117f8565b335f8181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610a7d848484610686565b6001600160a01b0383163b1561080457610a998484848461108f565b610804576108046368d2bf6b60e11b610dd3565b5f818152600b60209081526040918290209151606092610acf9290910161192e565b6040516020818303038152906040529050919050565b5f828152600a6020526040902060010154610aff81610f0b565b6108048383610fa6565b33610b1c6009546001600160a01b031690565b6001600160a01b031614158015610b5a5750610b587f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63361099f565b155b15610b7857604051636609677b60e11b815260040160405180910390fd5b5f547f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f203545f516020611ba65f395f51905f5291906001600160401b0316838115801590610be35750816001600160401b031681610bd76001545f540390565b610be191906119e2565b115b15610c0157604051636a29267160e01b815260040160405180910390fd5b610c0b878261116d565b5f5b81811015610c69575f610c2082866119e2565b9050878783818110610c3457610c346119f5565b9050602002810190610c469190611a09565b5f838152600b6020526040902091610c5f919083611a52565b5050600101610c0d565b5050505050505050565b610c7e858585610686565b82846001600160a01b0316866001600160a01b03167fbd5c95affecf80a51b513bb4eddd42724421b80ef31b07cee1b5b25d8ce5a05b8585604051610cc4929190611b0b565b60405180910390a45050505050565b604051606090610d07907f99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f2029060200161192e565b604051602081830303815290604052905090565b610d23611011565b6001600160a01b038116610d5157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610d5a8161103e565b50565b5f6001600160e01b03198216637965db0b60e01b148061059657506301ffc9a760e01b6001600160e01b0319831614610596565b5f5f54821015610dce575f5b505f8281526004602052604081205490819003610dc457610dbd83611b39565b9250610d9d565b600160e01b161590505b919050565b805f5260045ffd5b5f610de58361085c565b9050818015610dfd5750336001600160a01b03821614155b15610e2057610e0c8133610540565b610e2057610e206367d9dca160e11b610dd3565b5f8381526006602052604080822080546001600160a01b0319166001600160a01b0388811691821790925591518693918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b5f81815260046020526040902054805f03610ee9575f548210610ea957610ea9636f96cda160e11b610dd3565b5b505f19015f818152600460205260409020548015610eaa57600160e01b81165f03610ed457919050565b610ee4636f96cda160e11b610dd3565b610eaa565b600160e01b81165f03610efb57919050565b610dce636f96cda160e11b610dd3565b610d5a8133611186565b5f610f20838361099f565b610f9f575f838152600a602090815260408083206001600160a01b03861684529091529020805460ff19166001179055610f573390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610596565b505f610596565b5f610fb1838361099f565b15610f9f575f838152600a602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610596565b6009546001600160a01b031633146108ba5760405163118cdaa760e01b8152336004820152602401610d48565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b604051630a85bd0160e11b81525f906001600160a01b0385169063150b7a02906110c3903390899088908890600401611b4e565b6020604051808303815f875af19250505080156110fd575060408051601f3d908101601f191682019092526110fa91810190611b8a565b60015b611150573d80801561112a576040519150601f19603f3d011682016040523d82523d5f602084013e61112f565b606091505b5080515f03611148576111486368d2bf6b60e11b610dd3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b610682828260405180602001604052805f8152506111bf565b611190828261099f565b6106825760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610d48565b6111c9838361121f565b6001600160a01b0383163b1561083d575f548281035b6111f15f86838060010194508661108f565b611205576112056368d2bf6b60e11b610dd3565b8181106111df57815f5414611218575f5ffd5b5050505050565b5f80549082900361123a5761123a63b562e8dd60e01b610dd3565b5f8181526004602090815260408083206001600160a01b0387164260a01b6001881460e11b1781179091558084526005909252822080546801000000000000000186020190559081900361129757611297622e076360e81b610dd3565b818301825b80835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f5fa481816001019150810361129c57505f5550505050565b6001600160e01b031981168114610d5a575f5ffd5b5f602082840312156112fe575f5ffd5b8135611309816112d9565b9392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6113096020830184611310565b5f60208284031215611360575f5ffd5b5035919050565b80356001600160a01b0381168114610dce575f5ffd5b5f5f6040838503121561138e575f5ffd5b61139783611367565b946020939093013593505050565b5f5f5f606084860312156113b7575f5ffd5b6113c084611367565b92506113ce60208501611367565b929592945050506040919091013590565b5f5f604083850312156113f0575f5ffd5b8235915061140060208401611367565b90509250929050565b5f60208284031215611419575f5ffd5b61130982611367565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561145857611458611422565b60405290565b604051602081016001600160401b038111828210171561145857611458611422565b5f5f6001600160401b0384111561149957611499611422565b50604051601f19601f85018116603f011681018181106001600160401b03821117156114c7576114c7611422565b6040528381529050808284018510156114de575f5ffd5b838360208301375f60208583010152509392505050565b5f82601f830112611504575f5ffd5b61130983833560208501611480565b5f60208284031215611523575f5ffd5b81356001600160401b03811115611538575f5ffd5b8201808403608081121561154a575f5ffd5b611552611436565b82356001600160401b03811115611567575f5ffd5b611573878286016114f5565b82525060208301356001600160401b0381111561158e575f5ffd5b61159a878286016114f5565b60208301525060408301356001600160401b038111156115b8575f5ffd5b6115c4878286016114f5565b6040830152506020605f19830112156115db575f5ffd5b6115e361145e565b9150606083013592506001600160401b0383168314611600575f5ffd5b91815260608201529392505050565b5f5f60408385031215611620575f5ffd5b61162983611367565b91506020830135801515811461163d575f5ffd5b809150509250929050565b5f5f5f5f6080858703121561165b575f5ffd5b61166485611367565b935061167260208601611367565b92506040850135915060608501356001600160401b03811115611693575f5ffd5b8501601f810187136116a3575f5ffd5b6116b287823560208401611480565b91505092959194509250565b5f5f5f604084860312156116d0575f5ffd5b6116d984611367565b925060208401356001600160401b038111156116f3575f5ffd5b8401601f81018613611703575f5ffd5b80356001600160401b03811115611718575f5ffd5b8660208260051b840101111561172c575f5ffd5b939660209190910195509293505050565b5f5f5f5f5f60808688031215611751575f5ffd5b61175a86611367565b945061176860208701611367565b93506040860135925060608601356001600160401b03811115611789575f5ffd5b8601601f81018813611799575f5ffd5b80356001600160401b038111156117ae575f5ffd5b8860208284010111156117bf575f5ffd5b959894975092955050506020019190565b5f5f604083850312156117e1575f5ffd5b6117ea83611367565b915061140060208401611367565b600181811c9082168061180c57607f821691505b60208210810361182a57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561083d57805f5260205f20601f840160051c810160208510156118555750805b601f840160051c820191505b81811015611218575f8155600101611861565b81516001600160401b0381111561188d5761188d611422565b6118a18161189b84546117f8565b84611830565b6020601f8211600181146118d3575f83156118bc5750848201515b5f19600385901b1c1916600184901b178455611218565b5f84815260208120601f198516915b8281101561190257878501518255602094850194600190920191016118e2565b508482101561191f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b7f646174613a6170706c69636174696f6e2f6a736f6e3b757466382c000000000081525f5f835461195e816117f8565b6001821680156119755760018114611990576119c3565b60ff198316601b870152601b821515830287010193506119c3565b865f5260205f205f5b838110156119b8578154888201601b0152600190910190602001611999565b5050601b8287010193505b509195945050505050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610596576105966119ce565b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e19843603018112611a1e575f5ffd5b8301803591506001600160401b03821115611a37575f5ffd5b602001915036819003821315611a4b575f5ffd5b9250929050565b6001600160401b03831115611a6957611a69611422565b611a7d83611a7783546117f8565b83611830565b5f601f841160018114611aae575f8515611a975750838201355b5f19600387901b1c1916600186901b178355611218565b5f83815260208120601f198716915b82811015611add5786850135825560209485019460019092019101611abd565b5086821015611af9575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b5f81611b4757611b476119ce565b505f190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90611b8090830184611310565b9695505050505050565b5f60208284031215611b9a575f5ffd5b8151611309816112d956fe99391ccf5d97dbb7711a73831d943712d1774ca037a259af20891dc6f0d9f200a264697066735822122005b8bd1c7e0e07e5ba22977a5e0bec433868e824de8e7025ca0be2847f4422fb64736f6c634300081c0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300f59cae2d8704429a88f4a038c4cff8d2643dc6b4647d519013fb42e0b4344200a264697066735822122056399907f954138c333f5f469822bd35fcf471d0f3c630b48453a3fd8f31a2b864736f6c634300081c0033",
}

// LikeProtocolABI is the input ABI used to generate the binding from.
// Deprecated: Use LikeProtocolMetaData.ABI instead.
var LikeProtocolABI = LikeProtocolMetaData.ABI

// LikeProtocolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LikeProtocolMetaData.Bin instead.
var LikeProtocolBin = LikeProtocolMetaData.Bin

// DeployLikeProtocol deploys a new Ethereum contract, binding an instance of LikeProtocol to it.
func DeployLikeProtocol(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LikeProtocol, error) {
	parsed, err := LikeProtocolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LikeProtocolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LikeProtocol{LikeProtocolCaller: LikeProtocolCaller{contract: contract}, LikeProtocolTransactor: LikeProtocolTransactor{contract: contract}, LikeProtocolFilterer: LikeProtocolFilterer{contract: contract}}, nil
}

// LikeProtocol is an auto generated Go binding around an Ethereum contract.
type LikeProtocol struct {
	LikeProtocolCaller     // Read-only binding to the contract
	LikeProtocolTransactor // Write-only binding to the contract
	LikeProtocolFilterer   // Log filterer for contract events
}

// LikeProtocolCaller is an auto generated read-only Go binding around an Ethereum contract.
type LikeProtocolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LikeProtocolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LikeProtocolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LikeProtocolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LikeProtocolSession struct {
	Contract     *LikeProtocol     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LikeProtocolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LikeProtocolCallerSession struct {
	Contract *LikeProtocolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// LikeProtocolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LikeProtocolTransactorSession struct {
	Contract     *LikeProtocolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// LikeProtocolRaw is an auto generated low-level Go binding around an Ethereum contract.
type LikeProtocolRaw struct {
	Contract *LikeProtocol // Generic contract binding to access the raw methods on
}

// LikeProtocolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LikeProtocolCallerRaw struct {
	Contract *LikeProtocolCaller // Generic read-only contract binding to access the raw methods on
}

// LikeProtocolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LikeProtocolTransactorRaw struct {
	Contract *LikeProtocolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLikeProtocol creates a new instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocol(address common.Address, backend bind.ContractBackend) (*LikeProtocol, error) {
	contract, err := bindLikeProtocol(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LikeProtocol{LikeProtocolCaller: LikeProtocolCaller{contract: contract}, LikeProtocolTransactor: LikeProtocolTransactor{contract: contract}, LikeProtocolFilterer: LikeProtocolFilterer{contract: contract}}, nil
}

// NewLikeProtocolCaller creates a new read-only instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolCaller(address common.Address, caller bind.ContractCaller) (*LikeProtocolCaller, error) {
	contract, err := bindLikeProtocol(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolCaller{contract: contract}, nil
}

// NewLikeProtocolTransactor creates a new write-only instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolTransactor(address common.Address, transactor bind.ContractTransactor) (*LikeProtocolTransactor, error) {
	contract, err := bindLikeProtocol(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolTransactor{contract: contract}, nil
}

// NewLikeProtocolFilterer creates a new log filterer instance of LikeProtocol, bound to a specific deployed contract.
func NewLikeProtocolFilterer(address common.Address, filterer bind.ContractFilterer) (*LikeProtocolFilterer, error) {
	contract, err := bindLikeProtocol(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolFilterer{contract: contract}, nil
}

// bindLikeProtocol binds a generic wrapper to an already deployed contract.
func bindLikeProtocol(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LikeProtocolMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LikeProtocol *LikeProtocolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LikeProtocol.Contract.LikeProtocolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LikeProtocol *LikeProtocolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.Contract.LikeProtocolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LikeProtocol *LikeProtocolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LikeProtocol.Contract.LikeProtocolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LikeProtocol *LikeProtocolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LikeProtocol.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LikeProtocol *LikeProtocolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LikeProtocol *LikeProtocolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LikeProtocol.Contract.contract.Transact(opts, method, params...)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LikeProtocol *LikeProtocolSession) MINTERROLE() ([32]byte, error) {
	return _LikeProtocol.Contract.MINTERROLE(&_LikeProtocol.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCallerSession) MINTERROLE() ([32]byte, error) {
	return _LikeProtocol.Contract.MINTERROLE(&_LikeProtocol.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _LikeProtocol.Contract.UPGRADEINTERFACEVERSION(&_LikeProtocol.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_LikeProtocol *LikeProtocolCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _LikeProtocol.Contract.UPGRADEINTERFACEVERSION(&_LikeProtocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolSession) Owner() (common.Address, error) {
	return _LikeProtocol.Contract.Owner(&_LikeProtocol.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LikeProtocol *LikeProtocolCallerSession) Owner() (common.Address, error) {
	return _LikeProtocol.Contract.Owner(&_LikeProtocol.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolSession) Paused() (bool, error) {
	return _LikeProtocol.Contract.Paused(&_LikeProtocol.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LikeProtocol *LikeProtocolCallerSession) Paused() (bool, error) {
	return _LikeProtocol.Contract.Paused(&_LikeProtocol.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LikeProtocol.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolSession) ProxiableUUID() ([32]byte, error) {
	return _LikeProtocol.Contract.ProxiableUUID(&_LikeProtocol.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_LikeProtocol *LikeProtocolCallerSession) ProxiableUUID() ([32]byte, error) {
	return _LikeProtocol.Contract.ProxiableUUID(&_LikeProtocol.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolTransactor) Initialize(opts *bind.TransactOpts, initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "initialize", initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.Initialize(&_LikeProtocol.TransactOpts, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address initialOwner) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Initialize(initialOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.Initialize(&_LikeProtocol.TransactOpts, initialOwner)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolTransactor) MintNFT(opts *bind.TransactOpts, msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "mintNFT", msgMintNFT)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolSession) MintNFT(msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFT(&_LikeProtocol.TransactOpts, msgMintNFT)
}

// MintNFT is a paid mutator transaction binding the contract method 0xa3a19884.
//
// Solidity: function mintNFT((address,address,(string)) msgMintNFT) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) MintNFT(msgMintNFT MsgMintNFT) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFT(&_LikeProtocol.TransactOpts, msgMintNFT)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolTransactor) MintNFTs(opts *bind.TransactOpts, msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "mintNFTs", msgMintNFTs)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolSession) MintNFTs(msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFTs(&_LikeProtocol.TransactOpts, msgMintNFTs)
}

// MintNFTs is a paid mutator transaction binding the contract method 0xf311c6cb.
//
// Solidity: function mintNFTs((address,address,(string)[]) msgMintNFTs) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) MintNFTs(msgMintNFTs MsgMintNFTs) (*types.Transaction, error) {
	return _LikeProtocol.Contract.MintNFTs(&_LikeProtocol.TransactOpts, msgMintNFTs)
}

// NewClass is a paid mutator transaction binding the contract method 0x2865e32c.
//
// Solidity: function newClass((address,(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolTransactor) NewClass(opts *bind.TransactOpts, msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "newClass", msgNewClass)
}

// NewClass is a paid mutator transaction binding the contract method 0x2865e32c.
//
// Solidity: function newClass((address,(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolSession) NewClass(msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.NewClass(&_LikeProtocol.TransactOpts, msgNewClass)
}

// NewClass is a paid mutator transaction binding the contract method 0x2865e32c.
//
// Solidity: function newClass((address,(string,string,string,(uint64))) msgNewClass) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) NewClass(msgNewClass MsgNewClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.NewClass(&_LikeProtocol.TransactOpts, msgNewClass)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolSession) Pause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Pause(&_LikeProtocol.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Pause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Pause(&_LikeProtocol.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolSession) RenounceOwnership() (*types.Transaction, error) {
	return _LikeProtocol.Contract.RenounceOwnership(&_LikeProtocol.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _LikeProtocol.Contract.RenounceOwnership(&_LikeProtocol.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.TransferOwnership(&_LikeProtocol.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _LikeProtocol.Contract.TransferOwnership(&_LikeProtocol.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolSession) Unpause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Unpause(&_LikeProtocol.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_LikeProtocol *LikeProtocolTransactorSession) Unpause() (*types.Transaction, error) {
	return _LikeProtocol.Contract.Unpause(&_LikeProtocol.TransactOpts)
}

// UpdateClass is a paid mutator transaction binding the contract method 0xd4ccb2d6.
//
// Solidity: function updateClass((address,address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolTransactor) UpdateClass(opts *bind.TransactOpts, msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "updateClass", msgUpdateClass)
}

// UpdateClass is a paid mutator transaction binding the contract method 0xd4ccb2d6.
//
// Solidity: function updateClass((address,address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolSession) UpdateClass(msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpdateClass(&_LikeProtocol.TransactOpts, msgUpdateClass)
}

// UpdateClass is a paid mutator transaction binding the contract method 0xd4ccb2d6.
//
// Solidity: function updateClass((address,address,(string,string,string,(uint64))) msgUpdateClass) returns()
func (_LikeProtocol *LikeProtocolTransactorSession) UpdateClass(msgUpdateClass MsgUpdateClass) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpdateClass(&_LikeProtocol.TransactOpts, msgUpdateClass)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpgradeToAndCall(&_LikeProtocol.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_LikeProtocol *LikeProtocolTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _LikeProtocol.Contract.UpgradeToAndCall(&_LikeProtocol.TransactOpts, newImplementation, data)
}

// LikeProtocolInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the LikeProtocol contract.
type LikeProtocolInitializedIterator struct {
	Event *LikeProtocolInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolInitialized represents a Initialized event raised by the LikeProtocol contract.
type LikeProtocolInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) FilterInitialized(opts *bind.FilterOpts) (*LikeProtocolInitializedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolInitializedIterator{contract: _LikeProtocol.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *LikeProtocolInitialized) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolInitialized)
				if err := _LikeProtocol.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_LikeProtocol *LikeProtocolFilterer) ParseInitialized(log types.Log) (*LikeProtocolInitialized, error) {
	event := new(LikeProtocolInitialized)
	if err := _LikeProtocol.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolNewClassIterator is returned from FilterNewClass and is used to iterate over the raw logs and unpacked data for NewClass events raised by the LikeProtocol contract.
type LikeProtocolNewClassIterator struct {
	Event *LikeProtocolNewClass // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolNewClassIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolNewClass)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolNewClass)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolNewClassIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolNewClassIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolNewClass represents a NewClass event raised by the LikeProtocol contract.
type LikeProtocolNewClass struct {
	ClassId common.Address
	Params  MsgNewClass
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewClass is a free log retrieval operation binding the contract event 0x10936a740a24382c463d67a570ea343f2be4259b397e07470360b8a964bce074.
//
// Solidity: event NewClass(address classId, (address,(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) FilterNewClass(opts *bind.FilterOpts) (*LikeProtocolNewClassIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "NewClass")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolNewClassIterator{contract: _LikeProtocol.contract, event: "NewClass", logs: logs, sub: sub}, nil
}

// WatchNewClass is a free log subscription operation binding the contract event 0x10936a740a24382c463d67a570ea343f2be4259b397e07470360b8a964bce074.
//
// Solidity: event NewClass(address classId, (address,(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) WatchNewClass(opts *bind.WatchOpts, sink chan<- *LikeProtocolNewClass) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "NewClass")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolNewClass)
				if err := _LikeProtocol.contract.UnpackLog(event, "NewClass", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewClass is a log parse operation binding the contract event 0x10936a740a24382c463d67a570ea343f2be4259b397e07470360b8a964bce074.
//
// Solidity: event NewClass(address classId, (address,(string,string,string,(uint64))) params)
func (_LikeProtocol *LikeProtocolFilterer) ParseNewClass(log types.Log) (*LikeProtocolNewClass, error) {
	event := new(LikeProtocolNewClass)
	if err := _LikeProtocol.contract.UnpackLog(event, "NewClass", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the LikeProtocol contract.
type LikeProtocolOwnershipTransferredIterator struct {
	Event *LikeProtocolOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolOwnershipTransferred represents a OwnershipTransferred event raised by the LikeProtocol contract.
type LikeProtocolOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LikeProtocolOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolOwnershipTransferredIterator{contract: _LikeProtocol.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LikeProtocolOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolOwnershipTransferred)
				if err := _LikeProtocol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_LikeProtocol *LikeProtocolFilterer) ParseOwnershipTransferred(log types.Log) (*LikeProtocolOwnershipTransferred, error) {
	event := new(LikeProtocolOwnershipTransferred)
	if err := _LikeProtocol.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LikeProtocol contract.
type LikeProtocolPausedIterator struct {
	Event *LikeProtocolPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolPaused represents a Paused event raised by the LikeProtocol contract.
type LikeProtocolPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) FilterPaused(opts *bind.FilterOpts) (*LikeProtocolPausedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolPausedIterator{contract: _LikeProtocol.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LikeProtocolPaused) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolPaused)
				if err := _LikeProtocol.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LikeProtocol *LikeProtocolFilterer) ParsePaused(log types.Log) (*LikeProtocolPaused, error) {
	event := new(LikeProtocolPaused)
	if err := _LikeProtocol.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LikeProtocol contract.
type LikeProtocolUnpausedIterator struct {
	Event *LikeProtocolUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolUnpaused represents a Unpaused event raised by the LikeProtocol contract.
type LikeProtocolUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LikeProtocolUnpausedIterator, error) {

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LikeProtocolUnpausedIterator{contract: _LikeProtocol.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LikeProtocolUnpaused) (event.Subscription, error) {

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolUnpaused)
				if err := _LikeProtocol.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LikeProtocol *LikeProtocolFilterer) ParseUnpaused(log types.Log) (*LikeProtocolUnpaused, error) {
	event := new(LikeProtocolUnpaused)
	if err := _LikeProtocol.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LikeProtocolUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the LikeProtocol contract.
type LikeProtocolUpgradedIterator struct {
	Event *LikeProtocolUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LikeProtocolUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LikeProtocolUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LikeProtocolUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LikeProtocolUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LikeProtocolUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LikeProtocolUpgraded represents a Upgraded event raised by the LikeProtocol contract.
type LikeProtocolUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*LikeProtocolUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LikeProtocol.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &LikeProtocolUpgradedIterator{contract: _LikeProtocol.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *LikeProtocolUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _LikeProtocol.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LikeProtocolUpgraded)
				if err := _LikeProtocol.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_LikeProtocol *LikeProtocolFilterer) ParseUpgraded(log types.Log) (*LikeProtocolUpgraded, error) {
	event := new(LikeProtocolUpgraded)
	if err := _LikeProtocol.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
